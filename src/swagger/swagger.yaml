swagger: "2.0"
info:
  description: "Implementation of service fabric reliable concurrent queue as a service. [Github](https://github.com/hareeshnagaraj/sf_queue_service)"
  version: "1.0.0"
  title: "SF Reliable Concurrent Queue as service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/666"
tags:
- name: "Management"
  description: "Manage all queues. Address the queue management endpoint corresponding to your queue management service"
- name: "Queue"
  description: "Work with a specific queue. Address the endpoint returned by /getorcreate/{queuename}"
schemes:
- "http"
paths:
  /getorcreate/{queueName}:
    post:
      tags:
      - "Management"
      summary: "Gets or adds a new reliable concurent queue if it doesn't exist and returns a unique identifier to that queue"
      description: ""
      operationId: "getorcreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queueName"
        in: "path"
        description: "Name of queue to getorcreate"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Configuration for reliable concurrent queue"
        schema:
          $ref: "#/definitions/GetOrCreateQueueMessage"
      responses:
        200:
          description: "
          If the queue does not exist, returns the fully qualified uri/endpoint of the newly getoraddd queue. If the queue does exist, return the fully qualified uri/endpoint of the existing queue.
          - "
          schema:
            $ref: '#/definitions/Queue'
        405:
          description: "Invalid input. Returned if the provided queue name is not embeddable in a URI or the parameters do not match a queue getoraddd with the provided queue name."
  /delete/{queueName}:
    delete:
      tags:
      - "Management"
      summary: "Deletes the reliable concurent queue corresponding to the provided queue name"
      description: ""
      operationId: "delete"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queueName"
        in: "path"
        description: "Name of queue to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "
          The queue was successfully deleted."
        405:
          description: "Invalid input. Returned if the provided queue name does not exist."
  /list/{queueNamePrefix}:
    get:
      tags:
      - "Management"
      summary: "Lists all the RCQ currently available"
      description: ""
      operationId: "listPrefix"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "queueNamePrefix"
        in: "path"
        description: "Prefix of RCQ instances to list. 
        \n To list all queue names, use 'all' as the queueNamePrefix. "
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The list of queues was successfully returned."
        405:
          description: "The name prefix is."
  /enqueue/:
    post:
      tags:
      - "Queue"
      summary: "Enqueues an object into the associated RCQ"
      description: ""
      operationId: "enqueue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object to enqueue in a reliable concurrent queue. 
        \n The 'value' parameter is stored in the queue and returned to any dequeuer - this can be any string. 
        \n The deduplication id ensures duplicate message entries are not inserted into the queue when retrying a request - if provided, this value should be unique for each inserted object"
        schema:
          $ref: "#/definitions/EnqueueMessage"
      responses:
        200:
          description: "The string was successfully enqueued."
        405:
          description: "The supplied string was invalid"
  /trydequeue/start/:
    post:
      tags:
      - "Queue"
      summary: "Tries to dequeue an object from the associated RCQ"
      description: "---------"
      operationId: "trydequeue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Optional parameters. Dequeue timeout represents the maximum duration for this 'trydequeue' operation. Number of items represents the number of items to dequeue "
        schema:
          $ref: "#/definitions/TryDequeueMessage"
      responses:
        200:
          description: "Returns an id associated with this try dequeue operation and an array of dequeued strings. If there are no items in this queue, an empty array would return.
          
          - Dequeue timeout parameter overrides service-level configuration for this specific dequeue operation"
          schema:
            $ref: "#/definitions/TryDequeueResponseMessage"
        500:
          description: "Unable to dequeue requested items from reliable concurrent queue"
  /trydequeue/complete/{dequeueId}:
    post:
      tags:
      - "Queue"
      summary: "Completes the dequeue operation"
      description: "The client must call this API after successfully receiving the dequeued values from trydequeue/start/ to ensure the queue state is persisted and the returned items removed."
      operationId: "completedequeue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "dequeueId"
        in: "path"
        description: "Id of associated dequeue operation"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Completed the dequeue operation"
        500:
          description: "Unable to dequeue requested items from reliable concurrent queue"
  
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  GetOrCreateQueueMessage:
    type: "object"
    properties:
      dequeueTimeoutInSeconds:
        type: "integer"
        format: "uint64"
        example: 10
      retentionPeriodInSeconds:
        type: "integer"
        format: "uint64"
        example : 11
      deduplicationPeriodInSeconds:
        type: "integer"
        format: "uint64"
        example : 12
      visbilityTimeout:
        type: "integer"
        format: "uint64"
        example : 13
    xml:
      name: "GetOrCreateQueueMessage"
  EnqueueMessage:
    type: "object"
    properties:
      value:
        type: "string"
        example : "object1"
      deduplicationId:
        type: "integer"
        format: "uint64"
        example: 1234
    xml:
      name: "EnqueueMessage"
  TryDequeueMessage:
    type: "object"
    properties:
      dequeueTimeout:
        type: "integer"
        format: "uint64"
    xml:
      name: "TryDequeueMessage"
  TryDequeueResponseMessage:
    type: "object"
    properties:
      dequeueId:
        type: "integer"
        format: "uint64"
        example: 23423
      dequeueTimeout:
        type: "integer"
        format: "uint64"
        example: 1230
      dequeuedObjects:
        type: "array"
        items: 
          type : "string"
        example:
          - "object1"
          - "object2"
          - "object3"
    xml:
      name: "TryDequeueResponseMessage"
  Queue:
    type: "object"
    properties:
      queueName:
        type: "string"
      queueEndpoint:
        type: "string"
